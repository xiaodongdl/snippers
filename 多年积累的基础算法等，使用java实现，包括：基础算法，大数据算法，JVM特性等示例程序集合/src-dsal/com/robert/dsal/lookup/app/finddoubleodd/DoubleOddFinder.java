package com.robert.dsal.lookup.app.finddoubleodd;

// TODO 还没完全实现 参考：http://blog.csdn.net/zzran/article/details/8108787
/**
 * 
 * 1. 一个数组里面除了一个元素外其他所有元素都是出现偶数次的。
 * 方法：所有元素异或，剩下的值就是那个出现一次的元素。
 * 
 * 2. 一个数组里面除了两个元素外其他所有元素都是出现偶数次的。
 * 方法：所有元素异或，然后找到一位为1的，分成两组，出现一次的两个元组各在一组，然后，使用前一问题的方法对每个求解。
 * 
 * 3. 一个数组里面除了三个元素外其他所有元素都是出现偶数次的。
 * 方法：
 * 1. 首先所有元素异或，一定有一位为1，按照这位为1的，分成0的一组和1的一组。（问题：如何证明呢？）
 * 2. 参考下面的可能性，三位与或在一起，某位结果为1，有4种情况, efgh, 其中e表示，三个数字跑到一组，而fgh表示一个去一组，另外两个去另外一组
 * a.000 = 0
 * b.011 = 0
 * c.101 = 0
 * d.110 = 0
 * 
 * e.111 = 1
 * f.001 = 1
 * g.010 = 1
 * h.100 = 1
 * 3.如果三个都跑到一组了，那么另外一组就都是重复的数字，与或结果应该为0，而三元素那组与或不为0。
 * 4.如果是fgh，一组有一个单一元素，另外一组有两个单元素，那么与或结果都不为0，就可以和第3步区分了，然后，有一个单元素那组数量是奇数，有两个单元素那组数量是偶数，可以区分开，各自用问题1和问题2的方法求解。
 * 3.1 如果是情况3，那么都是重复那组数字就抛弃，对三元素所在那边继续递归使用步骤3和4，如果在4中找到解，则结束，否则如果在第3步剩下3个元素了，也就是解了。
 */
public interface DoubleOddFinder {
	public int[] findDoubleOdd(int[] seq);
}
